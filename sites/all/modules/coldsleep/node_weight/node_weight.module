<?php
// $Id$

/**
 * @file
 * Node weight module's administrative pages.
 *
 * Contains form building functions, submit handlers, and theme functions for
 * the module's overview form, add and edit forms, and the delete confirmation
 * form.
 */
function node_weight_permission() {
  return array(
    'administer node weight' => array(
      'title' => 'Aminister node weight',
      'description' => t('Perform administration tasks for node weight.'),
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function node_weight_menu() {
	$items['admin/content/node_weight'] = array(
		'title' => t('Weight'),
		'description' => t('Select content type for weight of node.'),
		'page callback' => 'node_weight_type_form',
		'access arguments' => array('administer node weight'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'node_weight.admin.inc',
	);
	$items['admin/content/node_weight/config'] =  array(
		'title' => t('Select content type'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_weight_admin_settings_form'),
		'access arguments' => array('administer node weight'),
		'type' => MENU_LOCAL_ACTION,
		'file' => 'node_weight.admin.inc',
  );
  $items['admin/content/node_weight/config/%'] = array(
    'title' => t('Node Weight !type', array('!type' => arg(4))),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_weight_overview_form', 4),
    'access arguments' => array('administer node weight'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'node_weight.admin.inc',
  );
	return $items;
}

/**
 * Implementation of hook_theme().
 */
function node_weight_theme() {
  return array(
    'node_weight_overview_form' => array(
      'render element' => 'form'
    )
  );
}


/**
 * Implementation of hook_node_insert().
 */
function node_weight_node_insert($node) {
  if (node_weight_in_allow_type($node)) {
    $node->url = empty($node->url) ? 'node/'. $node->nid : $node->url;
    db_merge('node_weight')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'weight' => $node->weight? $node->weight: -50,
        'url' => $node->url
      ))
      ->execute();
  }
}

/**
 * Implementation of hook_node_update().
 */
function node_weight_node_update($node) {
  if (node_weight_in_allow_type($node)) {
    $node->url = empty($node->url) ? 'node/'. $node->nid : $node->url;
    db_update('node_weight')
      ->fields(
        array('url' => $node->url)
      )
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_node_delete().
 */
function node_weight_node_delete($node) {
  if (node_weight_in_allow_type($node)) {
    db_delete('node_weight')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_node_load().
 */
function node_weight_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $data = db_query("SELECT * FROM {node_weight} WHERE nid = :nid", array(':nid' => $node->nid));
    foreach ($data as $record) {
	    $nodes[$node->nid]->url = $record->url;
	    $nodes[$node->nid]->weight = $record->weight;
	  }
	}
}

/**
 * Check node weight allowed type function.
 */
function node_weight_in_allow_type($node) {
  $allow_type = variable_get('node_weight_allow_type', NULL);
	if ($allow_type) {
		foreach ($allow_type as $type => $value) {
			if ($value) {
				$allow_types[] = $type;
			}
		}

		if (isset($allow_types) && in_array($node->type, $allow_types)) {
		  return true;
		}
	}

	return false;
}

/**
 * Implementation of hook_form_alter().
 */
function node_weight_form_alter(&$form, $form_state, $form_id) {
	$allow_type = variable_get('node_weight_allow_type', NULL);
	if ($allow_type) {
		foreach ($allow_type as $type => $value) {
			if ($value) {
				$allow_form[] = $type.'_node_form';
			}
		}
    $delta = str_replace('_node_form', '', $form_id);
		if (isset($allow_form) && in_array($form_id, $allow_form)) {
			$node = node_load(arg(1));

      if (!variable_get('nw_display_title_'.$delta, TRUE)) {
        $form['title']['#required'] = FALSE;
        $form['title']['#access'] = FALSE;
      }

      if (!variable_get('nw_display_body_'.$delta, TRUE)) {
        $form['body']['#required'] = FALSE;
        $form['body']['#access'] = FALSE;
      }

			$form['url'] = array(
				'#type' => 'textfield',
				'#title' => t('URL'),
				'#default_value' => empty($node->url) ? '' : $node->url,
        '#access' => variable_get('nw_display_image_as_link_'.$delta, TRUE),
			);
		}
	}
}

/**
 * Implementation of hook_block_info().
 */
function node_weight_block_info() {
  if ($allow_type = variable_get('node_weight_allow_type', NULL)) {
    foreach ($allow_type as $type => $value) {
      if ($value) {
        $blocks[$type]['info'] = t('Animation !type', array('!type' => $type));
      }
    }
    return $blocks;
  }
}

/**
 * Implementation of hook_block_configure().
 */
function node_weight_block_configure($delta = '') {
  drupal_add_css(drupal_get_path('module', 'node_weight') .'/node_weight.css');
  // Load node_weight ordered table.
  $node = NULL;
  $form_state = array();
  require_once('node_weight.admin.inc');
  $form = node_weight_overview_form($node, $form_state, $delta, TRUE);
  $types = array();
  foreach (module_implements('weight_info') as $name) {
    $function = $name .'_weight_info';
    $return = $function();
    if (isset($return) && is_array($return)) {
      foreach ($return['form'] as $key => $_form) {
        $return['form'][$key]['#default_value'] = variable_get('nw_'. $key .'_'. $delta, $return['form'][$key]['#default_value']);
      }
      $form['node_weight_'. $name .'_fs'] = $return['form'];
      $form['node_weight_'. $name .'_fs']['#type'] = 'fieldset';
      $form['node_weight_'. $name .'_fs']['#title'] = $return['name'] .' settings';
      $form['node_weight_'. $name .'_fs']['#collapsible'] = TRUE;
      $form['node_weight_'. $name .'_fs']['#collapsed'] = variable_get('nw_display_style_'. $delta, '') == $name ? TRUE : TRUE;
      $display_list[$name] = $return['name'] .' - '. $return['description'];
      $types[] = $name;
    }
  }
  if ($display_list) {
    if (count($display_list) == 1) {
      $form['display_style'] = array(
        '#type' => 'hidden',
        '#value' => key($display_list),
        '#weight' => -10,
      );
    }
    else {
      $form['display_style'] = array(
        '#type' => 'select',
        '#title' => t('Display style'),
        '#default_value' => variable_get('nw_display_style_'. $delta, 0),
        '#options' => $display_list,
        '#weight' => -10,
      );
    }
  }
  $form['general_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -9,
  );
  $form['general_fs']['number_of_item'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit number of items'),
    '#description' => t('Leave blank if do not want to limit.'),
    '#default_value' => variable_get('nw_number_of_item_'. $delta, 5),
    '#size' => 5,
  );
  $form['general_fs']['image_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Image width'),
    '#default_value' => variable_get('nw_image_width_'. $delta, 475),
  );
  $form['general_fs']['image_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Image height'),
    '#default_value' => variable_get('nw_image_height_'. $delta, 230),
  );
  $form['general_fs']['display_image_as_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display image as link'),
    '#default_value' => variable_get('nw_display_image_as_link_'. $delta, TRUE),
  );
  $form['general_fs']['display_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display title'),
    '#default_value' => variable_get('nw_display_title_'. $delta, FALSE),
  );
  $form['general_fs']['display_body'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display body'),
    '#default_value' => variable_get('nw_display_body_'. $delta, FALSE),
  );
  $form['general_fs']['footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer'),
    '#description' => t('Display message after node body. Leave blank if do not want to display.'),
    '#default_value' => variable_get('nw_footer_'. $delta, ''),
  );

  // Javascript
  $nw_settings['node_weight'] = array(
    'types' => $types,
  );
  drupal_add_js(drupal_get_path('module', 'node_weight') .'/node_weight.js');
  drupal_add_js($nw_settings, 'setting');

  return $form;
}

/**
 * Implementation of hook_block_save().
 */
function node_weight_block_save($delta = '', $edit = array()) {
  variable_set('nw_display_style_'. $delta, $edit['display_style']);
  variable_set('nw_number_of_item_'. $delta, $edit['number_of_item']);
  variable_set('nw_display_title_'. $delta, $edit['display_title']);
  variable_set('nw_display_body_'. $delta, $edit['display_body']);
  variable_set('nw_image_width_'. $delta, $edit['image_width']);
  variable_set('nw_image_height_'. $delta, $edit['image_height']);
  variable_set('nw_footer_'. $delta, $edit['footer']);
  variable_set('nw_display_image_as_link_'. $delta, $edit['display_image_as_link']);

  // Save settings from implements module
  foreach (module_implements('weight_info') as $name) {
    $function = $name .'_weight_info';
    $return = $function();
    if (isset($return) && is_array($return)) {
      if (!empty($return['form'])) {
        foreach ($return['form'] as $key => $form) {
          if (array_key_exists($key, $edit)) {
            variable_set('nw_'. $key .'_'. $delta, $edit[$key]);
          }
        }
      }
    }
  }

  // Save node_weight arrange nodes.
  $nodes = $edit['node_weight'];
	foreach($nodes as $node) {
	  db_update("node_weight")
	    ->fields(array(
	      'weight' => $node['weight']
	    ))
	    ->condition('nid',$node['nid'])
	    ->execute();
	}
  //drupal_flush_all_caches();
  image_style_flush(array('name' => 'node_weight_'.$delta.'_image'));
}

/**
 * Implementation of hook_block_view().
 */
function node_weight_block_view($delta = '') {
  //$node = node_load(19);
  //print_r($node);
  $settings = array(
    'number_of_item' => variable_get('nw_number_of_item_'. $delta, 5),
    'style' => variable_get('nw_display_style_'. $delta, 0),
    'preset_image' => 'node_weight_'.$delta.'_image',
    'image_width' => variable_get('nw_image_width_'. $delta, 475),
    'image_height' => variable_get('nw_image_height_'. $delta, 230),
    'display_title' => variable_get('nw_display_title_'. $delta, FALSE),
    'display_body' => variable_get('nw_display_body_'. $delta, FALSE),
    'footer' => variable_get('nw_footer_'. $delta, ''),
    'display_image_as_link' => variable_get('nw_display_image_as_link_'. $delta, TRUE),
  );

  $limit = $settings['number_of_item'] > 0 ? 'LIMIT 0, '. $settings['number_of_item'] : '';

  // Multi-language support
  if (module_exists('locale')) {
    global $language;
    $weight = db_query("SELECT n.nid, nw.url FROM {node} n LEFT JOIN {node_weight} nw ON n.nid = nw.nid WHERE n.type = :delta AND n.status = 1 AND (n.language = '' OR n.language = 'und' OR n.language = :lang) ORDER BY nw.weight, n.created DESC $limit", array(':delta' => $delta, ':lang' => $language->language));
  }
  else {
    $weight = db_query("SELECT n.nid, nw.url FROM {node} n LEFT JOIN {node_weight} nw ON n.nid = nw.nid WHERE n.type = '$delta' AND n.status = 1 ORDER BY nw.weight, n.created DESC $limit ");
  }

  // List nodes
  $nodes = array();
  foreach ($weight as $_node) {
    $style = variable_get('nw_display_style_'.$delta, FALSE);
    $function = $style .'_weight_info';
    if (function_exists($function)) {
      $return = $function();
      foreach ($return['form'] as $key => $form) {
        $settings[$key] = variable_get('nw_'. $key .'_'. $delta, NULL);
      }
    }

    $node = node_load($_node->nid);
    //drupal_set_message('<pre>'. print_r($node, 1) .'</pre>');
    $node->url = $_node->url;

    // Multi-language URL
    if (!empty($node->language) && $node->language != 'und') {
      if (mb_substr($node->url, 0, 7) != 'http://') {
        $node->url = $node->language .'/'. drupal_get_path_alias($node->url);
      }
    }

    if (mb_substr($node->url, 0, 7) != 'http://') {
      $node->link = l($node->title, $node->url);
    }
    else {
      $node->link = l($node->title, $node->url, array('absolute' => TRUE, 'attributes' => array('target' => '_blank')));
    }

    $node->node_weight = array(
      'image_path' => '',
      'thumb_path' => '',
      'swf_path' => '',
      'embed' => ''
    );
    $node->language = $node->language? $node->language: 'und';
    if (isset($node->{'node_weight_'.$delta.'_image'}[$node->language]))
      $node->node_weight['image_path'] = $node->{'node_weight_'.$delta.'_image'}[$node->language][0]['uri'];
    if (isset($node->{'node_weight_'.$delta.'_thumb'}[$node->language]))
      $node->node_weight['thumb_path'] = $node->{'node_weight_'.$delta.'_thumb'}[$node->language][0]['uri'];
    if (isset($node->{'node_weight_'.$delta.'_swf'}[$node->language]))
      $node->node_weight['swf_path'] = $node->{'node_weight_'.$delta.'_swf'}[$node->language][0]['uri'];
    if (isset($node->{'node_weight_'.$delta.'_embed'}[$node->language][0]['value']))
      $node->node_weight['embed'] = $node->{'node_weight_'.$delta.'_embed'}[$node->language][0]['value'];

    $nodes[] = $node;
  }

  if ($style = variable_get('nw_display_style_'.$delta, FALSE)) {
    $function = $style .'_weight_view';
    if (function_exists($function)) {
      $block['content'] = $function($nodes, $delta, $settings);
    }
  }
  if (empty($block['content'])) {
    $block['content'] = 'No content in this slide.';
  }

  return $block;
}

/**
 * Return settings
 */
function node_weight_get_settings($name, $type) {
  return variable_get('nw_'. $name .'_'. $type, NULL);
}

/**
 * Theme the node weight overview form.
 *
 * Arranges nodes in a table, and adds the css and js for draggable sorting.
 *
 * @ingroup themeable
 * @ingroup forms
 * @see node_weight_overview_form()
 */
function theme_node_weight_overview_form($variables) {
  // Each node has a 'weight' that can be used to arrange it in relation to
  // other nodes. Drupal's tabledrag.js library allows users to control these
  // weights by dragging and dropping the nodes in a list -- we just need to
  // add identifying CSS classes to key elements in the table.
  $form = $variables['form'];

  $rows = array();
  //$rows[] = array('<pre>' . print_r($form,1) . '</pre>', '', '', 'test', '');
  foreach (element_children($form) as $key) {
    if (!is_numeric($key)) continue;
    $row = array();
    // Render the hidden 'node_weight id' field and the title of the node into the
    // same column of the row.

    $row[] = drupal_render($form[$key]['image']);

    if (isset($form[$key]['display_title']) && isset($form[$key]['display_title']['#value'])) {
      $row[] = drupal_render($form[$key]['title']);
    }

    // Add an identifying CSS class to our weight field, as it's the one
    // the tabledrag.js will be controlling. This can be anything we want it to
    // be, we'll just tell the tabledrag.js library what it should look for.
    $form[$key]['weight']['#attributes']['class'] = array('node-weight-weight');
    $row[] = drupal_render($form[$key]['nid']).drupal_render($form[$key]['weight']);

    // Render the edit and delete links
    $row[] = drupal_render($form[$key]['edit']);
	  $row[] = drupal_render($form[$key]['delete']);

    // Add the new row to our collection of rows, and give it the 'draggable'
    // class, indicating that it should be... well, draggable.
    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  // If there were no nodes found, note the fact so users don't get confused
  // by a completely empty table.
  if (count($rows) == 0) {
    $rows[] = array(t('No nodes have been added.'), '<span class="node-weight-weight"></span>', '');
  }

  // Render a list of header titles, and our array of rows, into a table. Even
  // we've already rendered all of our node, we always call drupal_render()
  // on the form itself after we're done, so hidden security fields and other
  // elements (like buttons) will appear properly at the bottom of the form.
  $output = drupal_render($form['create_new']);

  $header = array(t('Image'), t('Title'), t('Weight'), t('Edit'), t('Delete'));
  if (!$form[$key]['display_title']['#value']) {
    unset($header[1]);
  }
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'node-weight-overview')
  ));

  drupal_add_js(drupal_get_path('module', 'node_weight') .'/override_block.js',
    array('weight' => 100)
  );

  if (!$form['#is_merge']) {
    $output .= drupal_render_children($form);
  }


  // Now that we've built our output, tell Drupal to add the tabledrag.js library.
  // We'll pass in the ID of the table, the behavior we want it to use, and the
  // class that appears on each 'weight' form element it should be controlling.
  drupal_add_tabledrag('node-weight-overview', 'order', 'self', 'node-weight-weight');

  return $output;
}

/**
 * hook_image_default_styles() {
 */
function node_weight_image_default_styles() {
  foreach (array_filter(variable_get('node_weight_allow_type', array())) as $type) {
    $styles['node_weight_'.$type.'_image'] = array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => variable_get('nw_image_width_'. $type, 475),
            'height' => variable_get('nw_image_height_'. $type, 230),
          ),
          'weight' => 0,
        ),
      ),
    );
  }
  $styles['node_weight_table_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 100, 'height' => 100, 'upscale' => 1),
        'weight' => 0,
      ),
    ),
  );
  
  return $styles;
}

/**
 * Implements of hook_image_effect_info().
 */
function node_weight_image_effect_info() {
  $effects['bottom_eclipse'] = array(
    'label' => t('Bottom eclipse'),
    'help' => t('Cut the area in eclipse on the bottom of image.'),
    'effect callback' => 'node_weight_bottom_eclipse_effect',
  );
  return $effects;
}

/**
 * Bottom eclipse process image.
 */
function node_weight_bottom_eclipse_effect(stdClass $image, $params) {
  da($image);

  $extension = str_replace('jpg', 'jpeg', $image->info['extension']);
  $function = 'imagecreatefrom' . $extension;
  $filepath = $image->source;
  $w = $params['width'];
  $h = $params['height'];

  $img = $function($filepath);
  $img_magicpink = imagecolorallocatealpha($img, 255, 0, 255, 127);
  // (Get its dimensions for copying)
  list($w, $h) = getimagesize($filepath);

  $copy = $function($filepath);
  imagealphablending($copy, true);
  $copy_magicpink = imagecolorallocate($copy, 255, 0, 255);
  imagecolortransparent($copy, $copy_magicpink);

  $mask = imagecreatetruecolor($w, $h);
  imagealphablending($mask, true);
  // Set the masking colours
  $mask_black = imagecolorallocate($mask, 0, 0, 0);
  $mask_magicpink = imagecolorallocate($mask, 255, 255, 255);
  imagecolortransparent($mask, $mask_black);
  imagefill($mask, 0, 0, $mask_magicpink);
  // Draw the circle for the mask
  $circle_x = $w/2;
  $circle_y = 0;
  $circle_w = $w*2;
  $circle_h = $h*2;
  imagefilledellipse($mask, $circle_x, $circle_y, $circle_w, $circle_h, $mask_black);

  imagecopymerge($copy, $mask, 0, 0, 0, 0, $w, $h, 100);

  // My example is turning the original image gray and leaving the masked area as colour
  $x = imagesx($img);
  $y = imagesy($img);
  $gray = imagecreatetruecolor($x, $y);
  imagecolorallocate($gray, 0, 0, 0);
  for ($i = 0; $i < $x; $i++) {
    for ($j = 0; $j < $y; $j++) {
      $rgb = imagecolorat($img, $i, $j);
      $r = ( $rgb >> 16 ) & 0xFF;
      $g = ( $rgb >> 8 ) & 0xFF;
      $b = $rgb & 0xFF;
      //for gray mode $r = $g = $b
      $color = max(array($r, $g, $b));
      $gray_color = imagecolorexact($img, $color, $color, $color);
      imagesetpixel($gray, $i, $j, $gray_color);
    }
  }
  imagecopymergegray($gray, $copy, 0, 0, 0, 0, $w, $h, 100);
  imagealphablending($gray, true);
  imagecolortransparent($gray, $mask_magicpink);

  imagedestroy($image->resource);
  $image->resource = $gray;
  return TRUE;
}

/**
 * Bottom eclipse form.
 */
function node_weight_bottom_eclipse_form($form, &$form_state) {
  return image_resize_form(array(), $form_state);
}

/**
 * botto eclipse summary.
 */
function node_weight_bottom_eclipse_summary() {
}

function node_weight_enable_content_type($type) {
  $allow_types = variable_get('node_weight_allow_type', array());
  $allow_types = array_merge($allow_types, array($type => $type));
  variable_set('node_weight_allow_type', $allow_types);
  $rs = db_query("SELECT n.nid AS nid, 0 AS weight, CONCAT('node/', n.nid) AS url FROM {node} AS n WHERE n.type = :type", array(':type' => $type));
  foreach ($rs as $record) {
    db_merge('node_weight')
      ->key(array('nid' => $record->nid))
      ->fields(array(
        'weight' => $record->weight,
        'url' => $record->url,
      ))
      ->execute();
  }

  /* Auto create field instances with Field API. */
  // Load node type fields.

  $fields = field_info_instances('node', $type);

  $auto_fields = array(
    array(
      'name' => 'node_weight_'.$type.'_image',
      'type' => 'image',
      'label' => 'Display image',
    ),
    /* Temporary disabled
    array(
      'name' => 'node_weight_'.$type.'_thumb',
      'type' => 'image',
      'label' => 'Thumbnail image',
    ),
    array(
      'name' => 'node_weight_'.$type.'_swf',
      'type' => 'file',
      'label' => 'Display Flash video',
    ),
    array(
      'name' => 'node_weight_'.$type.'_embed',
      'type' => 'text_long',
      'label' => 'Embed code',
    ),
    */
  );

  foreach ($auto_fields as $f) {
    if (!isset($fields[$f['name']])) {
      $global_field = field_info_field($f['name']);
      if (empty($global_field)) {
        // Create comment body field.
        $field = array(
          'field_name' => $f['name'],
          'type' => $f['type'],
        );
        field_create_field($field);
      }

      $instance = array(
        'field_name' => $f['name'],
        'entity_type' => 'node',
        'object_type' => 'node',
        'label' => t($f['label']),
        'bundle' => $type,
        'weight' => 99,
        'display' => array(
          'full' => array(
            'label' => 'hidden',
          ),
        ),
      );

      field_create_instance($instance);
    }
  }
}

function node_weight_admin_navi_alter(&$items) {
  $types = variable_get('node_weight_allow_type', array());
  if(!empty($types)) {
    $type_names = node_type_get_names();
    foreach ($types as $type) {
      if (isset($items['admin/content/'.$type])) {
        unset($items['admin/content/'.$type], $items['node/add/'.$type]);
        $items['admin/structure/block/manage/node_weight/'.$type] = array(
          'title' => t($type_names[$type]),
          'parent' => 'admin/themes'
        );
      }
    }
  }
}

function node_weight_mmode_form_mode($form_id) {
  if ($form_id == 'block_admin_configure') {
    return array(
      'basic' => array(
        '#edit-general-fs',
      ),
    );
  }
}
