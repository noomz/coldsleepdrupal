<?php

/**
 * Implementation of hook_weight_info().
 */
function node_weight_cycle_weight_info() {
  $form['cycle_navigation'] = array(
    '#type' => 'select',
    '#title' => t('Navigation\' position'),
    '#default_value' => variable_get('cycle_navigation', 'top-left'),
    '#options' => array(
      'none' => t('Do not display'),
      'top-left' => t('Top left'),
      //'top-right' => t('Top right'),
      'bottom-left' => t('Bottom left'),
      //'bottom-right' => t('Bottom right'),
    ),
  );
  $form['cycle_effect_speed'] = array(
    '#type' => 'textfield',
    '#title' => t('Fade speed'),
    '#description' => t('Speed in millisecond.'),
    '#default_value' => variable_get('cycle_effect_speed', 3000),
    '#size' => 5,
  );
  $form['cycle_effect_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Fade timeout'),
    '#description' => t('Speed in millisecond.'),
    '#default_value' => variable_get('cycle_effect_timeout', 6000),
    '#size' => 5,
  );
  
  return array(
    'name' => t('Cycle'),
    'description' => t('Fade display'),
    'form' => $form,
  );
}

/**
 * Implementation of hook_weight_view().
 */
function node_weight_cycle_weight_view($nodes, $type, $settings) {
  // Settings
  $embed = false;
  foreach ($settings as $name => $value) {
    $$name = $value;
  }
  
  // Generate items
  $items = array();
  foreach ($nodes as $i => $node) {
    foreach ($node->node_weight as $name => $value) {
      $$name = $value;
    }
    
    $hide = ($i > 0) ? 'none' : 'block';
    
    $item = '<div id="tab-'. $node->nid .'" class="node-weight-page" style="display:'. $hide .';">';
    $item1 = '';
    $item2 = '';
    if ($embed) {
      $item1 .= '<div class="node-weight-image node-weight-'. $type .'-image">'. $embed .'</div>';
    }
    elseif ($image_path) {
      // Make image
      $image = theme('image_style', array(
        'style_name' => $settings['preset_image'],
        'path'=>$image_path, 
        'alt'=>$node->title, 
        'title'=>$node->title,
        'attributes'=>array('width' => $settings['image_width'].'px', 'height' => $settings['image_height'].'px'),
        'getsize'=>FALSE
      ));
      // Image as link
      if ($display_image_as_link) {
        $options = array('html' => TRUE);
        if (mb_substr($node->url, 0, 7) == 'http://') {
          $options['absolute'] = TRUE;
          $options['attributes'] = array('target' => '_blank');
        }
        $image = l($image, $node->url, $options);
      }
      $item1 .= '<div class="node-weight-image node-weight-'. $type .'-image">'. $image .'</div>';
    }
    elseif ($swf_path && module_exists('swftools')) {
      /*$size = explode('x', variable_get('node_weight_swf_size_'.$delta, '210x150'));
      $swf_height = $size[1];
      $swf_width = $size[0];
      $items .= '<div class="node-weight-'.$delta.'-swf">';
      $items .= swf($swf_path, array('params' => array('height' => $swf_height, 'width' => $swf_width)));
      $items .= '</div>';*/
    }
    
    // Display title
    if ($display_title) {
      $item2 .= '<h3>'.$node->link.'</h3>';
    }
    
    // Display body
    if (!empty($display_body) && $node->body) {
      $item2 .= '<div class="node-weight-body node-weight-'. $type .'-body">';
      node_build_content($node, 'full');
      $body = '';
      foreach ($node->content['body'] as $key => $value) {
        $body .= is_numeric($key)? $value['#markup']: '';
      }
      $item2 .= $body;
      $item2 .= '</div>';
      $item2 .= $footer? '<div class="node-weight-footer node-weight-'. $type .'-footer"><div class="warp">'.$footer.'</div></div>': '';
    }
    if ($item2) {
      $item2 = '<div class="fit">'."\n".'</div>'.$item2;
    }

    $gap = 10;

    $item1 = $item1? '<div class="node-weight-content-first">'.$item1.'</div>': '';
    $item2 = $item2? '<div class="node-weight-content-second" style="height:'.$settings['image_height'].'px; margin-left:-'.($settings['image_width']).'px;"><div class="node-weight-content-second-wrap" style="margin-left:'.($settings['image_width']+$gap).'px;">'.$item2.'</div></div>': '';

    $item .= $item1.$item2;
    
    $item .= '</div>';
    
    // Store item
    $items[] = $item;
  }
  
  // HTML items
  $items = implode('', $items);
  
  // Wrap items
  $style = '';
  if (!($display_title && $display_body)) {
    $style = ' style="width:'.$settings['image_width'].'px;"';
  }
  $output = '<div class="node-weight-slide-content-cycle" id="marker-node-weight-navi-'.$type.'"'.$style.'>'. $items .'</div>';

  // Navigation
  $conner = 15;
  $conner += $gap;
  $styles = array(
    'none' => '',
    'top-left' => ' style="left:'.$conner.'px; top:'.$conner.'px;"',
    'top-right' => ' style="left:'.($settings['image_width']-($conner+$gap)).'px; top:'.$conner.'px;"',
    'bottom-left' => ' style="left:'.$conner.'px; top:'.($settings['image_height']-($conner+$gap)).'px"',
    'bottom-right' => ' style="left:'.($settings['image_width']-($conner+$gap)).'px; top:'.($settings['image_height']-($conner+$gap)).'px"',
  );
  $navi = '<div class="node-weight-slide-pager">';
  $navi .= '<ul id="node-weight-navi-'. $type .'" class="node-weight-navi node-weight-navi-cycle">';
  $navi .= '</ul>';
  $navi .= '</div>';

  if ($number_of_item > 1) {
    $output = $navi.$output;
  }
  
  // Wrap outest
  $output = '<div class="node-weight-slide node-weight-slide-cycle" style="height:'.$settings['image_height'].'px;">'. $output .'</div>';
	
	// Javascript
	$cycle_settings['node_weight']['cycle'] = array(
	  'speed' => $cycle_effect_speed ? $cycle_effect_speed : 3000,
	  'timeout' => $cycle_effect_timeout ? $cycle_effect_timeout : 6000,
	);
  drupal_add_css(drupal_get_path('module', 'node_weight_cycle') .'/node_weight.cycle.css');
  drupal_add_js($cycle_settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'node_weight_cycle') .'/node_weight.cycle.js');
  drupal_add_js(drupal_get_path('module', 'node_weight_cycle') .'/node_weight.cycle_build.js');
  
  return $output;
}

/**
 * Implementations of hook_theme().
 */
function node_weight_cycle_theme() {
  return array(
    'node_weight_cycle' => array(
      'template' => 'node-weight-cycle',
      'arguments' => array(),
    ),
  );
}

function node_weight_cycle_mmode_form_mode($form_id) {
  if ($form_id == 'block_admin_configure') {
    return array(
      'basic' => array(
        '#edit-node-weight-node-weight-cycle-fs',
      ),
    );
  }
}
